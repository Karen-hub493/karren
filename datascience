{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "1lizzp1gR2hRMkggN0S-96Q5S4EhrtlbF",
      "authorship_tag": "ABX9TyNey4+wGGdbvJNyjI6NdQyT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Karen-hub493/karren/blob/main/datascience\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ufbRuCleWOrm",
        "outputId": "1dab8116-1d44-4cee-f63c-946cacc622fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Speed_Limit  Num_Lanes  Driver_Alcohol_Level Weather_Condition  \\\n",
            "0           30          2                  0.00             clear   \n",
            "1           50          4                  0.05             rainy   \n",
            "2           60          4                  0.08             foggy   \n",
            "3           80          6                  0.10             clear   \n",
            "\n",
            "  Road_Condition  Accident_Severity  \n",
            "0            dry                  1  \n",
            "1            wet                  3  \n",
            "2            wet                  2  \n",
            "3            dry                  4  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Load dataset\n",
        "data = pd.read_csv('/road_accident - Copy.csv')\n",
        "\n",
        "# Display first few rows\n",
        "print(data.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for missing values\n",
        "print(data.isnull().sum())\n",
        "\n",
        "# Dropping rows with missing target values (severity)\n",
        "data = data.dropna(subset=['Accident_Severity'])\n",
        "\n",
        "# Filling or dropping missing values for features (independent variables)\n",
        "data.fillna(0, inplace=True)\n",
        "\n",
        "# Convert categorical variables (e.g., road type, weather) to numeric using one-hot encoding\n",
        "data = pd.get_dummies(data, columns=['Weather_Condition', 'Road_Condition'], drop_first=True)\n",
        "\n",
        "# Display cleaned data\n",
        "print(data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rVokw6l7tMJF",
        "outputId": "3313c1b1-c5d7-43f2-e4ad-9e2393469fdf"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Speed_Limit             0\n",
            "Num_Lanes               0\n",
            "Driver_Alcohol_Level    0\n",
            "Weather_Condition       0\n",
            "Road_Condition          0\n",
            "Accident_Severity       0\n",
            "dtype: int64\n",
            "   Speed_Limit  Num_Lanes  Driver_Alcohol_Level  Accident_Severity  \\\n",
            "0           30          2                  0.00                  1   \n",
            "1           50          4                  0.05                  3   \n",
            "2           60          4                  0.08                  2   \n",
            "3           80          6                  0.10                  4   \n",
            "\n",
            "   Weather_Condition_foggy  Weather_Condition_rainy  Road_Condition_wet  \n",
            "0                    False                    False               False  \n",
            "1                    False                     True                True  \n",
            "2                     True                    False                True  \n",
            "3                    False                    False               False  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Dependent variable\n",
        "Y = data['Accident_Severity']\n",
        "X = data.drop(columns=['Accident_Severity'])\n",
        "# X = data[['Speed_Limit', 'Num_Lanes', 'Driver_Alcohol_Level', 'Weather_Condition_Sunny', 'Road_Condition_Wet']]\n",
        "\n",
        "X_array = X.to_numpy()\n",
        "Y_array = Y.to_numpy()\n",
        "# Splitting the dataset into training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "rrwXurqqtMuf"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Initialize and train the model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, Y_train)\n",
        "\n",
        "# Make predictions\n",
        "Y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(Y_test, Y_pred)\n",
        "r2 = r2_score(Y_test, Y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fpa1EbtLy3Z5",
        "outputId": "1ffa2470-0517-4ebc-8357-4bc7a650009c"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 1.779256806406188\n",
            "R-squared: -6.117027225624752\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/Karen-hub493/Data-science.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uBRZDFxc0vOW",
        "outputId": "0d1d7430-f7d4-42b6-e95e-ec1846f9c1ba"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'Data-science' already exists and is not an empty directory.\n"
          ]
        }
      ]
    }
  ]
}